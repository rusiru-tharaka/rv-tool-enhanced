"""Initial database schema for RVTool platform

Revision ID: c4ab614708ac
Revises: 
Create Date: 2025-07-15 09:34:26.359319

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c4ab614708ac'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sessions',
    sa.Column('user_id', sa.String(length=255), nullable=True),
    sa.Column('session_name', sa.String(length=255), nullable=True),
    sa.Column('current_phase', sa.Enum('MIGRATION_SCOPE', 'COST_ESTIMATES', 'MODERNIZATION_OPPORTUNITIES', 'IMPLEMENTATION_ROADMAP', name='analysisphase'), nullable=False),
    sa.Column('completed_phases', sa.JSON(), nullable=True),
    sa.Column('total_vms', sa.Integer(), nullable=True),
    sa.Column('total_cpus', sa.Integer(), nullable=True),
    sa.Column('total_memory_gb', sa.Integer(), nullable=True),
    sa.Column('total_storage_gb', sa.Integer(), nullable=True),
    sa.Column('original_filename', sa.String(length=500), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('file_upload_path', sa.String(length=1000), nullable=True),
    sa.Column('analysis_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cost_analysis',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('target_region', sa.String(length=50), nullable=False),
    sa.Column('pricing_model', sa.String(length=50), nullable=False),
    sa.Column('instance_family', sa.String(length=50), nullable=True),
    sa.Column('reserved_instance_term', sa.String(length=20), nullable=True),
    sa.Column('reserved_instance_payment', sa.String(length=20), nullable=True),
    sa.Column('total_monthly_cost', sa.Float(), nullable=False),
    sa.Column('total_annual_cost', sa.Float(), nullable=False),
    sa.Column('infrastructure_monthly_cost', sa.Float(), nullable=True),
    sa.Column('network_monthly_cost', sa.Float(), nullable=True),
    sa.Column('storage_monthly_cost', sa.Float(), nullable=True),
    sa.Column('observability_monthly_cost', sa.Float(), nullable=True),
    sa.Column('backup_monthly_cost', sa.Float(), nullable=True),
    sa.Column('current_environment_monthly_cost', sa.Float(), nullable=True),
    sa.Column('monthly_savings', sa.Float(), nullable=True),
    sa.Column('annual_savings', sa.Float(), nullable=True),
    sa.Column('savings_percentage', sa.Float(), nullable=True),
    sa.Column('calculation_date', sa.DateTime(), nullable=True),
    sa.Column('pricing_data_version', sa.String(length=50), nullable=True),
    sa.Column('exchange_rate_used', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('optimization_opportunities', sa.JSON(), nullable=True),
    sa.Column('potential_monthly_savings', sa.Float(), nullable=True),
    sa.Column('analysis_assumptions', sa.JSON(), nullable=True),
    sa.Column('utilization_assumptions', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    op.create_table('migration_analysis',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('overall_complexity', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='migrationcomplexity'), nullable=False),
    sa.Column('complexity_score', sa.Integer(), nullable=False),
    sa.Column('estimated_timeline_months', sa.Integer(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('workload_classifications', sa.JSON(), nullable=True),
    sa.Column('recommended_strategy', sa.String(length=100), nullable=True),
    sa.Column('migration_waves', sa.JSON(), nullable=True),
    sa.Column('risk_level', sa.String(length=50), nullable=True),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('dependency_complexity', sa.String(length=50), nullable=True),
    sa.Column('external_dependencies', sa.JSON(), nullable=True),
    sa.Column('total_blockers', sa.Integer(), nullable=True),
    sa.Column('critical_blockers', sa.Integer(), nullable=True),
    sa.Column('high_blockers', sa.Integer(), nullable=True),
    sa.Column('medium_blockers', sa.Integer(), nullable=True),
    sa.Column('low_blockers', sa.Integer(), nullable=True),
    sa.Column('analysis_version', sa.String(length=50), nullable=True),
    sa.Column('analysis_parameters', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    op.create_table('modernization_analysis',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('total_opportunities', sa.Integer(), nullable=True),
    sa.Column('total_vms_analyzed', sa.Integer(), nullable=True),
    sa.Column('modernizable_vms', sa.Integer(), nullable=True),
    sa.Column('modernization_percentage', sa.Float(), nullable=True),
    sa.Column('total_current_monthly_cost', sa.Float(), nullable=True),
    sa.Column('total_modernized_monthly_cost', sa.Float(), nullable=True),
    sa.Column('total_monthly_savings', sa.Float(), nullable=True),
    sa.Column('total_annual_savings', sa.Float(), nullable=True),
    sa.Column('average_savings_percentage', sa.Float(), nullable=True),
    sa.Column('modernization_categories', sa.JSON(), nullable=True),
    sa.Column('complexity_breakdown', sa.JSON(), nullable=True),
    sa.Column('estimated_implementation_months', sa.Integer(), nullable=True),
    sa.Column('quick_wins_count', sa.Integer(), nullable=True),
    sa.Column('business_value_score', sa.Float(), nullable=True),
    sa.Column('innovation_potential', sa.String(length=50), nullable=True),
    sa.Column('operational_efficiency_gain', sa.Float(), nullable=True),
    sa.Column('modernization_risk_level', sa.String(length=50), nullable=True),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('mitigation_strategies', sa.JSON(), nullable=True),
    sa.Column('analysis_methodology', sa.String(length=100), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('analysis_parameters', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    op.create_table('vm_inventory',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('vm_name', sa.String(length=255), nullable=False),
    sa.Column('dns_name', sa.String(length=255), nullable=True),
    sa.Column('powerstate', sa.String(length=50), nullable=True),
    sa.Column('template', sa.Boolean(), nullable=True),
    sa.Column('config_status', sa.String(length=50), nullable=True),
    sa.Column('cpus', sa.Integer(), nullable=False),
    sa.Column('memory_mb', sa.BigInteger(), nullable=False),
    sa.Column('nics', sa.Integer(), nullable=True),
    sa.Column('disks', sa.Integer(), nullable=True),
    sa.Column('provisioned_mb', sa.BigInteger(), nullable=True),
    sa.Column('in_use_mb', sa.BigInteger(), nullable=True),
    sa.Column('unshared_mb', sa.BigInteger(), nullable=True),
    sa.Column('guest_os', sa.String(length=255), nullable=True),
    sa.Column('vm_version', sa.String(length=50), nullable=True),
    sa.Column('tools_version', sa.String(length=100), nullable=True),
    sa.Column('tools_status', sa.String(length=50), nullable=True),
    sa.Column('host', sa.String(length=255), nullable=True),
    sa.Column('cluster', sa.String(length=255), nullable=True),
    sa.Column('datacenter', sa.String(length=255), nullable=True),
    sa.Column('folder', sa.String(length=500), nullable=True),
    sa.Column('resource_pool', sa.String(length=255), nullable=True),
    sa.Column('vapp', sa.String(length=255), nullable=True),
    sa.Column('network_1', sa.String(length=255), nullable=True),
    sa.Column('network_2', sa.String(length=255), nullable=True),
    sa.Column('network_3', sa.String(length=255), nullable=True),
    sa.Column('network_4', sa.String(length=255), nullable=True),
    sa.Column('cpu_limit', sa.Integer(), nullable=True),
    sa.Column('cpu_reservation', sa.Integer(), nullable=True),
    sa.Column('memory_limit', sa.Integer(), nullable=True),
    sa.Column('memory_reservation', sa.Integer(), nullable=True),
    sa.Column('annotation', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('custom_field_1', sa.String(length=255), nullable=True),
    sa.Column('custom_field_2', sa.String(length=255), nullable=True),
    sa.Column('custom_field_3', sa.String(length=255), nullable=True),
    sa.Column('migration_complexity', sa.String(length=50), nullable=True),
    sa.Column('modernization_candidate', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_vm_cluster_datacenter', 'vm_inventory', ['cluster', 'datacenter'], unique=False)
    op.create_index('idx_vm_host_cluster', 'vm_inventory', ['host', 'cluster'], unique=False)
    op.create_index('idx_vm_migration_analysis', 'vm_inventory', ['migration_complexity', 'modernization_candidate'], unique=False)
    op.create_index('idx_vm_os_power', 'vm_inventory', ['guest_os', 'powerstate'], unique=False)
    op.create_index('idx_vm_resources', 'vm_inventory', ['cpus', 'memory_mb'], unique=False)
    op.create_index('idx_vm_session_name', 'vm_inventory', ['session_id', 'vm_name'], unique=False)
    op.create_index('idx_vm_storage', 'vm_inventory', ['provisioned_mb', 'in_use_mb'], unique=False)
    op.create_index(op.f('ix_vm_inventory_cluster'), 'vm_inventory', ['cluster'], unique=False)
    op.create_index(op.f('ix_vm_inventory_cpus'), 'vm_inventory', ['cpus'], unique=False)
    op.create_index(op.f('ix_vm_inventory_datacenter'), 'vm_inventory', ['datacenter'], unique=False)
    op.create_index(op.f('ix_vm_inventory_guest_os'), 'vm_inventory', ['guest_os'], unique=False)
    op.create_index(op.f('ix_vm_inventory_host'), 'vm_inventory', ['host'], unique=False)
    op.create_index(op.f('ix_vm_inventory_memory_mb'), 'vm_inventory', ['memory_mb'], unique=False)
    op.create_index(op.f('ix_vm_inventory_powerstate'), 'vm_inventory', ['powerstate'], unique=False)
    op.create_index(op.f('ix_vm_inventory_provisioned_mb'), 'vm_inventory', ['provisioned_mb'], unique=False)
    op.create_index(op.f('ix_vm_inventory_vm_name'), 'vm_inventory', ['vm_name'], unique=False)
    op.create_table('cost_estimates',
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('vm_id', sa.UUID(), nullable=False),
    sa.Column('recommended_instance_type', sa.String(length=50), nullable=False),
    sa.Column('recommended_instance_size', sa.String(length=50), nullable=False),
    sa.Column('instance_family', sa.String(length=50), nullable=True),
    sa.Column('pricing_plan', sa.String(length=50), nullable=False),
    sa.Column('hourly_rate', sa.Float(), nullable=False),
    sa.Column('monthly_compute_cost', sa.Float(), nullable=False),
    sa.Column('ebs_volume_type', sa.String(length=20), nullable=True),
    sa.Column('ebs_volume_size_gb', sa.Integer(), nullable=True),
    sa.Column('monthly_storage_cost', sa.Float(), nullable=True),
    sa.Column('monthly_network_cost', sa.Float(), nullable=True),
    sa.Column('data_transfer_gb_estimate', sa.Float(), nullable=True),
    sa.Column('monthly_backup_cost', sa.Float(), nullable=True),
    sa.Column('monthly_monitoring_cost', sa.Float(), nullable=True),
    sa.Column('total_monthly_cost', sa.Float(), nullable=False),
    sa.Column('total_annual_cost', sa.Float(), nullable=False),
    sa.Column('rightsizing_opportunity', sa.Boolean(), nullable=True),
    sa.Column('rightsizing_potential_savings', sa.Float(), nullable=True),
    sa.Column('reserved_instance_savings', sa.Float(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('calculation_notes', sa.JSON(), nullable=True),
    sa.Column('cpu_match_score', sa.Float(), nullable=True),
    sa.Column('memory_match_score', sa.Float(), nullable=True),
    sa.Column('storage_match_score', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['cost_analysis.id'], ),
    sa.ForeignKeyConstraint(['vm_id'], ['vm_inventory.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('migration_blockers',
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('vm_id', sa.UUID(), nullable=False),
    sa.Column('blocker_type', sa.String(length=100), nullable=False),
    sa.Column('severity', sa.Enum('CRITICAL', 'HIGH', 'MEDIUM', 'LOW', name='blockerseverity'), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('impact_description', sa.Text(), nullable=True),
    sa.Column('business_impact', sa.String(length=50), nullable=True),
    sa.Column('technical_impact', sa.String(length=50), nullable=True),
    sa.Column('remediation_strategy', sa.Text(), nullable=True),
    sa.Column('remediation_effort', sa.String(length=50), nullable=True),
    sa.Column('remediation_cost_estimate', sa.Float(), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('resolved_by', sa.String(length=255), nullable=True),
    sa.Column('detected_by', sa.String(length=100), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['migration_analysis.id'], ),
    sa.ForeignKeyConstraint(['vm_id'], ['vm_inventory.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('modernization_opportunities',
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('vm_id', sa.UUID(), nullable=False),
    sa.Column('modernization_type', sa.Enum('CONTAINERIZATION', 'SERVERLESS', 'MANAGED_DATABASE', 'MANAGED_SERVICE', 'CLOUD_NATIVE', 'MICROSERVICES', name='modernizationtype'), nullable=False),
    sa.Column('opportunity_title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('current_workload_type', sa.String(length=100), nullable=True),
    sa.Column('target_aws_service', sa.String(length=100), nullable=False),
    sa.Column('target_architecture', sa.Text(), nullable=True),
    sa.Column('current_monthly_cost', sa.Float(), nullable=False),
    sa.Column('modernized_monthly_cost', sa.Float(), nullable=False),
    sa.Column('monthly_savings', sa.Float(), nullable=False),
    sa.Column('annual_savings', sa.Float(), nullable=False),
    sa.Column('savings_percentage', sa.Float(), nullable=True),
    sa.Column('implementation_complexity', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='implementationcomplexity'), nullable=False),
    sa.Column('estimated_effort_hours', sa.Integer(), nullable=True),
    sa.Column('estimated_timeline_weeks', sa.Integer(), nullable=True),
    sa.Column('implementation_cost', sa.Float(), nullable=True),
    sa.Column('benefits', sa.JSON(), nullable=True),
    sa.Column('business_value_score', sa.Float(), nullable=True),
    sa.Column('technical_benefits', sa.JSON(), nullable=True),
    sa.Column('operational_benefits', sa.JSON(), nullable=True),
    sa.Column('implementation_risks', sa.JSON(), nullable=True),
    sa.Column('risk_mitigation', sa.JSON(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('prerequisites', sa.JSON(), nullable=True),
    sa.Column('dependencies', sa.JSON(), nullable=True),
    sa.Column('blockers', sa.JSON(), nullable=True),
    sa.Column('success_metrics', sa.JSON(), nullable=True),
    sa.Column('kpis', sa.JSON(), nullable=True),
    sa.Column('priority_score', sa.Float(), nullable=True),
    sa.Column('recommendation_strength', sa.String(length=50), nullable=True),
    sa.Column('analysis_notes', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['modernization_analysis.id'], ),
    sa.ForeignKeyConstraint(['vm_id'], ['vm_inventory.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('modernization_opportunities')
    op.drop_table('migration_blockers')
    op.drop_table('cost_estimates')
    op.drop_index(op.f('ix_vm_inventory_vm_name'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_provisioned_mb'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_powerstate'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_memory_mb'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_host'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_guest_os'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_datacenter'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_cpus'), table_name='vm_inventory')
    op.drop_index(op.f('ix_vm_inventory_cluster'), table_name='vm_inventory')
    op.drop_index('idx_vm_storage', table_name='vm_inventory')
    op.drop_index('idx_vm_session_name', table_name='vm_inventory')
    op.drop_index('idx_vm_resources', table_name='vm_inventory')
    op.drop_index('idx_vm_os_power', table_name='vm_inventory')
    op.drop_index('idx_vm_migration_analysis', table_name='vm_inventory')
    op.drop_index('idx_vm_host_cluster', table_name='vm_inventory')
    op.drop_index('idx_vm_cluster_datacenter', table_name='vm_inventory')
    op.drop_table('vm_inventory')
    op.drop_table('modernization_analysis')
    op.drop_table('migration_analysis')
    op.drop_table('cost_analysis')
    op.drop_table('sessions')
    # ### end Alembic commands ###
